#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool BUT MODIFIED BY ME.
//     Runtime Version:2.0.50727.6387
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNamespace
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="3_5")]
	public partial class LibraryDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAuthor(Author instance);
    partial void UpdateAuthor(Author instance);
    partial void DeleteAuthor(Author instance);
    partial void InsertBook(Book instance);
    partial void UpdateBook(Book instance);
    partial void DeleteBook(Book instance);
    partial void InsertBook_author(Book_author instance);
    partial void UpdateBook_author(Book_author instance);
    partial void DeleteBook_author(Book_author instance);
    partial void InsertBook_bookseller(Book_bookseller instance);
    partial void UpdateBook_bookseller(Book_bookseller instance);
    partial void DeleteBook_bookseller(Book_bookseller instance);
    partial void InsertBook_importer(Book_importer instance);
    partial void UpdateBook_importer(Book_importer instance);
    partial void DeleteBook_importer(Book_importer instance);
    partial void InsertBookseller(Bookseller instance);
    partial void UpdateBookseller(Bookseller instance);
    partial void DeleteBookseller(Bookseller instance);
    partial void InsertBooksellerbrach(Booksellerbrach instance);
    partial void UpdateBooksellerbrach(Booksellerbrach instance);
    partial void DeleteBooksellerbrach(Booksellerbrach instance);
    partial void InsertEditor(Editor instance);
    partial void UpdateEditor(Editor instance);
    partial void DeleteEditor(Editor instance);
    partial void InsertImporter(Importer instance);
    partial void UpdateImporter(Importer instance);
    partial void DeleteImporter(Importer instance);
    partial void InsertPublisher(Publisher instance);
    partial void UpdatePublisher(Publisher instance);
    partial void DeletePublisher(Publisher instance);
    partial void InsertRack(Rack instance);
    partial void UpdateRack(Rack instance);
    partial void DeleteRack(Rack instance);
    partial void InsertReview(Review instance);
    partial void UpdateReview(Review instance);
    partial void DeleteReview(Review instance);
    partial void InsertStoragelocation(Storagelocation instance);
    partial void UpdateStoragelocation(Storagelocation instance);
    partial void DeleteStoragelocation(Storagelocation instance);
    #endregion
		
		public LibraryDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		
		
		public LibraryDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		
		
		public System.Data.Linq.Table<Author> Authors
		{
			get
			{
				return this.GetTable<Author>();
			}
		}
		
		public System.Data.Linq.Table<Book> Books
		{
			get
			{
				return this.GetTable<Book>();
			}
		}
		
		public System.Data.Linq.Table<Book_author> Book_authors
		{
			get
			{
				return this.GetTable<Book_author>();
			}
		}
		
		public System.Data.Linq.Table<Book_bookseller> Book_booksellers
		{
			get
			{
				return this.GetTable<Book_bookseller>();
			}
		}
		
		public System.Data.Linq.Table<Book_importer> Book_importers
		{
			get
			{
				return this.GetTable<Book_importer>();
			}
		}
		
		public System.Data.Linq.Table<Bookseller> Booksellers
		{
			get
			{
				return this.GetTable<Bookseller>();
			}
		}
		
		public System.Data.Linq.Table<Booksellerbrach> Booksellerbraches
		{
			get
			{
				return this.GetTable<Booksellerbrach>();
			}
		}
		
		public System.Data.Linq.Table<Editor> Editors
		{
			get
			{
				return this.GetTable<Editor>();
			}
		}
		
		public System.Data.Linq.Table<Importer> Importers
		{
			get
			{
				return this.GetTable<Importer>();
			}
		}
		
		public System.Data.Linq.Table<Publisher> Publishers
		{
			get
			{
				return this.GetTable<Publisher>();
			}
		}
		
		public System.Data.Linq.Table<Rack> Racks
		{
			get
			{
				return this.GetTable<Rack>();
			}
		}
		
		public System.Data.Linq.Table<Review> Reviews
		{
			get
			{
				return this.GetTable<Review>();
			}
		}
		
		public System.Data.Linq.Table<Storagelocation> Storagelocations
		{
			get
			{
				return this.GetTable<Storagelocation>();
			}
		}
	}
	
	[Table(Name="author")]
	public partial class Author : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuthorID;
		
		private string _Surname;
		
		private string _Forename;
		
		private string _Homepage;
		
		private string _Email;
		
		private string _Cv;
		
		private EntitySet<Book_author> _Book_authors;
		
		private EntitySet<Review> _Reviews;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorIDChanging(int value);
    partial void OnAuthorIDChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnForenameChanging(string value);
    partial void OnForenameChanged();
    partial void OnHomepageChanging(string value);
    partial void OnHomepageChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnCvChanging(string value);
    partial void OnCvChanged();
    #endregion
		
		public Author()
		{
			this._Book_authors = new EntitySet<Book_author>(new Action<Book_author>(this.attach_Book_authors), new Action<Book_author>(this.detach_Book_authors));
			this._Reviews = new EntitySet<Review>(new Action<Review>(this.attach_Reviews), new Action<Review>(this.detach_Reviews));
			OnCreated();
		}
		
		[Column(Name="authorID", Storage="_AuthorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuthorID
		{
			get
			{
				return this._AuthorID;
			}
			set
			{
				if ((this._AuthorID != value))
				{
					this.OnAuthorIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorID = value;
					this.SendPropertyChanged("AuthorID");
					this.OnAuthorIDChanged();
				}
			}
		}
		
		[Column(Name="surname", Storage="_Surname", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[Column(Name="forename", Storage="_Forename", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string Forename
		{
			get
			{
				return this._Forename;
			}
			set
			{
				if ((this._Forename != value))
				{
					this.OnForenameChanging(value);
					this.SendPropertyChanging();
					this._Forename = value;
					this.SendPropertyChanged("Forename");
					this.OnForenameChanged();
				}
			}
		}
		
		[Column(Name="homepage", Storage="_Homepage", DbType="NVarChar(50)")]
		public string Homepage
		{
			get
			{
				return this._Homepage;
			}
			set
			{
				if ((this._Homepage != value))
				{
					this.OnHomepageChanging(value);
					this.SendPropertyChanging();
					this._Homepage = value;
					this.SendPropertyChanged("Homepage");
					this.OnHomepageChanged();
				}
			}
		}
		
		[Column(Name="email", Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Name="cv", Storage="_Cv", DbType="NVarChar(256)")]
		public string Cv
		{
			get
			{
				return this._Cv;
			}
			set
			{
				if ((this._Cv != value))
				{
					this.OnCvChanging(value);
					this.SendPropertyChanging();
					this._Cv = value;
					this.SendPropertyChanged("Cv");
					this.OnCvChanged();
				}
			}
		}
		
		[Association(Name="book_author-author", Storage="_Book_authors", ThisKey="AuthorID", OtherKey="AuthorID", DeleteRule="NO ACTION")]
		public EntitySet<Book_author> Book_authors
		{
			get
			{
				return this._Book_authors;
			}
			set
			{
				this._Book_authors.Assign(value);
			}
		}
		
		[Association(Name="review-author", Storage="_Reviews", ThisKey="AuthorID", OtherKey="AuthorID", DeleteRule="NO ACTION")]
		public EntitySet<Review> Reviews
		{
			get
			{
				return this._Reviews;
			}
			set
			{
				this._Reviews.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Book_authors(Book_author entity)
		{
			this.SendPropertyChanging();
			entity.Author = this;
		}
		
		private void detach_Book_authors(Book_author entity)
		{
			this.SendPropertyChanging();
			entity.Author = null;
		}
		
		private void attach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.Author = this;
		}
		
		private void detach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.Author = null;
		}
	}
	
	[Table(Name="book")]
	public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookID;
		
		private int _PublisherID;
		
		private int _EditorID;
		
		private int _LocationID;
		
		private string _Genre;
		
		private string _Yearofpublication;
		
		private string _Edition;
		
		private string _ISBN;
		
		private System.Nullable<decimal> _Purchaseprice;
		
		private System.Nullable<decimal> _Currentvalue;
		
		private string _Loadedoutto;
		
		private string _Conditionwhenloadout;
		
		private System.Nullable<System.DateTime> _Loadoutdate;
		
		private string _Additionalinfo1;
		
		private string _Additionalinfo2;
		
		private string _Additionalinfo3;
		
		private string _Additionalinfo4;
		
		private EntityRef<Editor> _Editor;
		
		private EntityRef<Publisher> _Publisher;
		
		private EntityRef<Storagelocation> _Storagelocation;
		
		private EntitySet<Book_author> _Book_authors;
		
		private EntitySet<Book_bookseller> _Book_booksellers;
		
		private EntitySet<Book_importer> _Book_importers;
		
		private EntitySet<Review> _Reviews;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookIDChanging(int value);
    partial void OnBookIDChanged();
    partial void OnPublisherIDChanging(int value);
    partial void OnPublisherIDChanged();
    partial void OnEditorIDChanging(int value);
    partial void OnEditorIDChanged();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnGenreChanging(string value);
    partial void OnGenreChanged();
    partial void OnYearofpublicationChanging(string value);
    partial void OnYearofpublicationChanged();
    partial void OnEditionChanging(string value);
    partial void OnEditionChanged();
    partial void OnISBNChanging(string value);
    partial void OnISBNChanged();
    partial void OnPurchasepriceChanging(System.Nullable<decimal> value);
    partial void OnPurchasepriceChanged();
    partial void OnCurrentvalueChanging(System.Nullable<decimal> value);
    partial void OnCurrentvalueChanged();
    partial void OnLoadedouttoChanging(string value);
    partial void OnLoadedouttoChanged();
    partial void OnConditionwhenloadoutChanging(string value);
    partial void OnConditionwhenloadoutChanged();
    partial void OnLoadoutdateChanging(System.Nullable<System.DateTime> value);
    partial void OnLoadoutdateChanged();
    partial void OnAdditionalinfo1Changing(string value);
    partial void OnAdditionalinfo1Changed();
    partial void OnAdditionalinfo2Changing(string value);
    partial void OnAdditionalinfo2Changed();
    partial void OnAdditionalinfo3Changing(string value);
    partial void OnAdditionalinfo3Changed();
    partial void OnAdditionalinfo4Changing(string value);
    partial void OnAdditionalinfo4Changed();
    #endregion
		
		public Book()
		{
			this._Editor = default(EntityRef<Editor>);
			this._Publisher = default(EntityRef<Publisher>);
			this._Storagelocation = default(EntityRef<Storagelocation>);
			this._Book_authors = new EntitySet<Book_author>(new Action<Book_author>(this.attach_Book_authors), new Action<Book_author>(this.detach_Book_authors));
			this._Book_booksellers = new EntitySet<Book_bookseller>(new Action<Book_bookseller>(this.attach_Book_booksellers), new Action<Book_bookseller>(this.detach_Book_booksellers));
			this._Book_importers = new EntitySet<Book_importer>(new Action<Book_importer>(this.attach_Book_importers), new Action<Book_importer>(this.detach_Book_importers));
			this._Reviews = new EntitySet<Review>(new Action<Review>(this.attach_Reviews), new Action<Review>(this.detach_Reviews));
			OnCreated();
		}
		
		[Column(Name="bookID", Storage="_BookID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[Column(Name="publisherID", Storage="_PublisherID", DbType="Int NOT NULL")]
		public int PublisherID
		{
			get
			{
				return this._PublisherID;
			}
			set
			{
				if ((this._PublisherID != value))
				{
					this.OnPublisherIDChanging(value);
					this.SendPropertyChanging();
					this._PublisherID = value;
					this.SendPropertyChanged("PublisherID");
					this.OnPublisherIDChanged();
				}
			}
		}
		
		[Column(Name="editorID", Storage="_EditorID", DbType="Int NOT NULL")]
		public int EditorID
		{
			get
			{
				return this._EditorID;
			}
			set
			{
				if ((this._EditorID != value))
				{
					this.OnEditorIDChanging(value);
					this.SendPropertyChanging();
					this._EditorID = value;
					this.SendPropertyChanged("EditorID");
					this.OnEditorIDChanged();
				}
			}
		}
		
		[Column(Name="locationID", Storage="_LocationID", DbType="Int NOT NULL")]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[Column(Name="genre", Storage="_Genre", DbType="NVarChar(15)")]
		public string Genre
		{
			get
			{
				return this._Genre;
			}
			set
			{
				if ((this._Genre != value))
				{
					this.OnGenreChanging(value);
					this.SendPropertyChanging();
					this._Genre = value;
					this.SendPropertyChanged("Genre");
					this.OnGenreChanged();
				}
			}
		}
		
		[Column(Name="yearofpublication", Storage="_Yearofpublication", DbType="NChar(4)")]
		public string Yearofpublication
		{
			get
			{
				return this._Yearofpublication;
			}
			set
			{
				if ((this._Yearofpublication != value))
				{
					this.OnYearofpublicationChanging(value);
					this.SendPropertyChanging();
					this._Yearofpublication = value;
					this.SendPropertyChanged("Yearofpublication");
					this.OnYearofpublicationChanged();
				}
			}
		}
		
		[Column(Name="edition", Storage="_Edition", DbType="NVarChar(15)")]
		public string Edition
		{
			get
			{
				return this._Edition;
			}
			set
			{
				if ((this._Edition != value))
				{
					this.OnEditionChanging(value);
					this.SendPropertyChanging();
					this._Edition = value;
					this.SendPropertyChanged("Edition");
					this.OnEditionChanged();
				}
			}
		}
		
		[Column(Storage="_ISBN", DbType="NVarChar(13)")]
		public string ISBN
		{
			get
			{
				return this._ISBN;
			}
			set
			{
				if ((this._ISBN != value))
				{
					this.OnISBNChanging(value);
					this.SendPropertyChanging();
					this._ISBN = value;
					this.SendPropertyChanged("ISBN");
					this.OnISBNChanged();
				}
			}
		}
		
		[Column(Name="purchaseprice", Storage="_Purchaseprice", DbType="Money")]
		public System.Nullable<decimal> Purchaseprice
		{
			get
			{
				return this._Purchaseprice;
			}
			set
			{
				if ((this._Purchaseprice != value))
				{
					this.OnPurchasepriceChanging(value);
					this.SendPropertyChanging();
					this._Purchaseprice = value;
					this.SendPropertyChanged("Purchaseprice");
					this.OnPurchasepriceChanged();
				}
			}
		}
		
		[Column(Name="currentvalue", Storage="_Currentvalue", DbType="Money")]
		public System.Nullable<decimal> Currentvalue
		{
			get
			{
				return this._Currentvalue;
			}
			set
			{
				if ((this._Currentvalue != value))
				{
					this.OnCurrentvalueChanging(value);
					this.SendPropertyChanging();
					this._Currentvalue = value;
					this.SendPropertyChanged("Currentvalue");
					this.OnCurrentvalueChanged();
				}
			}
		}
		
		[Column(Name="loadedoutto", Storage="_Loadedoutto", DbType="NVarChar(25)")]
		public string Loadedoutto
		{
			get
			{
				return this._Loadedoutto;
			}
			set
			{
				if ((this._Loadedoutto != value))
				{
					this.OnLoadedouttoChanging(value);
					this.SendPropertyChanging();
					this._Loadedoutto = value;
					this.SendPropertyChanged("Loadedoutto");
					this.OnLoadedouttoChanged();
				}
			}
		}
		
		[Column(Name="conditionwhenloadout", Storage="_Conditionwhenloadout", DbType="NVarChar(20)")]
		public string Conditionwhenloadout
		{
			get
			{
				return this._Conditionwhenloadout;
			}
			set
			{
				if ((this._Conditionwhenloadout != value))
				{
					this.OnConditionwhenloadoutChanging(value);
					this.SendPropertyChanging();
					this._Conditionwhenloadout = value;
					this.SendPropertyChanged("Conditionwhenloadout");
					this.OnConditionwhenloadoutChanged();
				}
			}
		}
		
		[Column(Name="loadoutdate", Storage="_Loadoutdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> Loadoutdate
		{
			get
			{
				return this._Loadoutdate;
			}
			set
			{
				if ((this._Loadoutdate != value))
				{
					this.OnLoadoutdateChanging(value);
					this.SendPropertyChanging();
					this._Loadoutdate = value;
					this.SendPropertyChanged("Loadoutdate");
					this.OnLoadoutdateChanged();
				}
			}
		}
		
		[Column(Name="additionalinfo1", Storage="_Additionalinfo1", DbType="NVarChar(100)")]
		public string Additionalinfo1
		{
			get
			{
				return this._Additionalinfo1;
			}
			set
			{
				if ((this._Additionalinfo1 != value))
				{
					this.OnAdditionalinfo1Changing(value);
					this.SendPropertyChanging();
					this._Additionalinfo1 = value;
					this.SendPropertyChanged("Additionalinfo1");
					this.OnAdditionalinfo1Changed();
				}
			}
		}
		
		[Column(Name="additionalinfo2", Storage="_Additionalinfo2", DbType="NVarChar(100)")]
		public string Additionalinfo2
		{
			get
			{
				return this._Additionalinfo2;
			}
			set
			{
				if ((this._Additionalinfo2 != value))
				{
					this.OnAdditionalinfo2Changing(value);
					this.SendPropertyChanging();
					this._Additionalinfo2 = value;
					this.SendPropertyChanged("Additionalinfo2");
					this.OnAdditionalinfo2Changed();
				}
			}
		}
		
		[Column(Name="additionalinfo3", Storage="_Additionalinfo3", DbType="NVarChar(100)")]
		public string Additionalinfo3
		{
			get
			{
				return this._Additionalinfo3;
			}
			set
			{
				if ((this._Additionalinfo3 != value))
				{
					this.OnAdditionalinfo3Changing(value);
					this.SendPropertyChanging();
					this._Additionalinfo3 = value;
					this.SendPropertyChanged("Additionalinfo3");
					this.OnAdditionalinfo3Changed();
				}
			}
		}
		
		[Column(Name="additionalinfo4", Storage="_Additionalinfo4", DbType="NVarChar(100)")]
		public string Additionalinfo4
		{
			get
			{
				return this._Additionalinfo4;
			}
			set
			{
				if ((this._Additionalinfo4 != value))
				{
					this.OnAdditionalinfo4Changing(value);
					this.SendPropertyChanging();
					this._Additionalinfo4 = value;
					this.SendPropertyChanged("Additionalinfo4");
					this.OnAdditionalinfo4Changed();
				}
			}
		}
		
		[Association(Name="book-editor", Storage="_Editor", ThisKey="EditorID", OtherKey="EditorID", IsForeignKey=true)]
		public Editor Editor
		{
			get
			{
				return this._Editor.Entity;
			}
			set
			{
				Editor previousValue = this._Editor.Entity;
				if (((previousValue != value) 
							|| (this._Editor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Editor.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._Editor.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._EditorID = value.EditorID;
					}
					else
					{
						this._EditorID = default(int);
					}
					this.SendPropertyChanged("Editor");
				}
			}
		}
		
		[Association(Name="book-publisher", Storage="_Publisher", ThisKey="PublisherID", OtherKey="PublisherID", IsForeignKey=true)]
		public Publisher Publisher
		{
			get
			{
				return this._Publisher.Entity;
			}
			set
			{
				Publisher previousValue = this._Publisher.Entity;
				if (((previousValue != value) 
							|| (this._Publisher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publisher.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._Publisher.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._PublisherID = value.PublisherID;
					}
					else
					{
						this._PublisherID = default(int);
					}
					this.SendPropertyChanged("Publisher");
				}
			}
		}
		
		[Association(Name="book-storagelocation", Storage="_Storagelocation", ThisKey="LocationID", OtherKey="LocationID", IsForeignKey=true)]
		public Storagelocation Storagelocation
		{
			get
			{
				return this._Storagelocation.Entity;
			}
			set
			{
				Storagelocation previousValue = this._Storagelocation.Entity;
				if (((previousValue != value) 
							|| (this._Storagelocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Storagelocation.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._Storagelocation.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._LocationID = value.LocationID;
					}
					else
					{
						this._LocationID = default(int);
					}
					this.SendPropertyChanged("Storagelocation");
				}
			}
		}
		
		[Association(Name="book_author-book", Storage="_Book_authors", ThisKey="BookID", OtherKey="BookID", DeleteRule="NO ACTION")]
		public EntitySet<Book_author> Book_authors
		{
			get
			{
				return this._Book_authors;
			}
			set
			{
				this._Book_authors.Assign(value);
			}
		}
		
		[Association(Name="book_bookseller-book", Storage="_Book_booksellers", ThisKey="BookID", OtherKey="BookID", DeleteRule="NO ACTION")]
		public EntitySet<Book_bookseller> Book_booksellers
		{
			get
			{
				return this._Book_booksellers;
			}
			set
			{
				this._Book_booksellers.Assign(value);
			}
		}
		
		[Association(Name="book_importer-book", Storage="_Book_importers", ThisKey="BookID", OtherKey="BookID", DeleteRule="NO ACTION")]
		public EntitySet<Book_importer> Book_importers
		{
			get
			{
				return this._Book_importers;
			}
			set
			{
				this._Book_importers.Assign(value);
			}
		}
		
		[Association(Name="review-book", Storage="_Reviews", ThisKey="BookID", OtherKey="BookID", DeleteRule="NO ACTION")]
		public EntitySet<Review> Reviews
		{
			get
			{
				return this._Reviews;
			}
			set
			{
				this._Reviews.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Book_authors(Book_author entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_Book_authors(Book_author entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
		
		private void attach_Book_booksellers(Book_bookseller entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_Book_booksellers(Book_bookseller entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
		
		private void attach_Book_importers(Book_importer entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_Book_importers(Book_importer entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
		
		private void attach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
	}
	
	[Table(Name="book_author")]
	public partial class Book_author : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookID;
		
		private int _AuthorID;
		
		private EntityRef<Author> _Author;
		
		private EntityRef<Book> _Book;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookIDChanging(int value);
    partial void OnBookIDChanged();
    partial void OnAuthorIDChanging(int value);
    partial void OnAuthorIDChanged();
    #endregion
		
		public Book_author()
		{
			this._Author = default(EntityRef<Author>);
			this._Book = default(EntityRef<Book>);
			OnCreated();
		}
		
		[Column(Name="bookID", Storage="_BookID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[Column(Name="authorID", Storage="_AuthorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AuthorID
		{
			get
			{
				return this._AuthorID;
			}
			set
			{
				if ((this._AuthorID != value))
				{
					this.OnAuthorIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorID = value;
					this.SendPropertyChanged("AuthorID");
					this.OnAuthorIDChanged();
				}
			}
		}
		
		[Association(Name="book_author-author", Storage="_Author", ThisKey="AuthorID", OtherKey="AuthorID", IsForeignKey=true)]
		public Author Author
		{
			get
			{
				return this._Author.Entity;
			}
			set
			{
				Author previousValue = this._Author.Entity;
				if (((previousValue != value) 
							|| (this._Author.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Author.Entity = null;
						previousValue.Book_authors.Remove(this);
					}
					this._Author.Entity = value;
					if ((value != null))
					{
						value.Book_authors.Add(this);
						this._AuthorID = value.AuthorID;
					}
					else
					{
						this._AuthorID = default(int);
					}
					this.SendPropertyChanged("Author");
				}
			}
		}
		
		[Association(Name="book_author-book", Storage="_Book", ThisKey="BookID", OtherKey="BookID", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.Book_authors.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.Book_authors.Add(this);
						this._BookID = value.BookID;
					}
					else
					{
						this._BookID = default(int);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="book_bookseller")]
	public partial class Book_bookseller : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookID;
		
		private int _BooksellerID;
		
		private EntityRef<Book> _Book;
		
		private EntityRef<Bookseller> _Bookseller;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookIDChanging(int value);
    partial void OnBookIDChanged();
    partial void OnBooksellerIDChanging(int value);
    partial void OnBooksellerIDChanged();
    #endregion
		
		public Book_bookseller()
		{
			this._Book = default(EntityRef<Book>);
			this._Bookseller = default(EntityRef<Bookseller>);
			OnCreated();
		}
		
		[Column(Name="bookID", Storage="_BookID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[Column(Name="booksellerID", Storage="_BooksellerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BooksellerID
		{
			get
			{
				return this._BooksellerID;
			}
			set
			{
				if ((this._BooksellerID != value))
				{
					this.OnBooksellerIDChanging(value);
					this.SendPropertyChanging();
					this._BooksellerID = value;
					this.SendPropertyChanged("BooksellerID");
					this.OnBooksellerIDChanged();
				}
			}
		}
		
		[Association(Name="book_bookseller-book", Storage="_Book", ThisKey="BookID", OtherKey="BookID", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.Book_booksellers.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.Book_booksellers.Add(this);
						this._BookID = value.BookID;
					}
					else
					{
						this._BookID = default(int);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		[Association(Name="book_bookseller-bookseller", Storage="_Bookseller", ThisKey="BooksellerID", OtherKey="BooksellerID", IsForeignKey=true)]
		public Bookseller Bookseller
		{
			get
			{
				return this._Bookseller.Entity;
			}
			set
			{
				Bookseller previousValue = this._Bookseller.Entity;
				if (((previousValue != value) 
							|| (this._Bookseller.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bookseller.Entity = null;
						previousValue.Book_booksellers.Remove(this);
					}
					this._Bookseller.Entity = value;
					if ((value != null))
					{
						value.Book_booksellers.Add(this);
						this._BooksellerID = value.BooksellerID;
					}
					else
					{
						this._BooksellerID = default(int);
					}
					this.SendPropertyChanged("Bookseller");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="book_importer")]
	public partial class Book_importer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookID;
		
		private int _ImporterID;
		
		private EntityRef<Book> _Book;
		
		private EntityRef<Importer> _Importer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookIDChanging(int value);
    partial void OnBookIDChanged();
    partial void OnImporterIDChanging(int value);
    partial void OnImporterIDChanged();
    #endregion
		
		public Book_importer()
		{
			this._Book = default(EntityRef<Book>);
			this._Importer = default(EntityRef<Importer>);
			OnCreated();
		}
		
		[Column(Name="bookID", Storage="_BookID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[Column(Name="importerID", Storage="_ImporterID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ImporterID
		{
			get
			{
				return this._ImporterID;
			}
			set
			{
				if ((this._ImporterID != value))
				{
					this.OnImporterIDChanging(value);
					this.SendPropertyChanging();
					this._ImporterID = value;
					this.SendPropertyChanged("ImporterID");
					this.OnImporterIDChanged();
				}
			}
		}
		
		[Association(Name="book_importer-book", Storage="_Book", ThisKey="BookID", OtherKey="BookID", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.Book_importers.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.Book_importers.Add(this);
						this._BookID = value.BookID;
					}
					else
					{
						this._BookID = default(int);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		[Association(Name="book_importer-importer", Storage="_Importer", ThisKey="ImporterID", OtherKey="ImporterID", IsForeignKey=true)]
		public Importer Importer
		{
			get
			{
				return this._Importer.Entity;
			}
			set
			{
				Importer previousValue = this._Importer.Entity;
				if (((previousValue != value) 
							|| (this._Importer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Importer.Entity = null;
						previousValue.Book_importers.Remove(this);
					}
					this._Importer.Entity = value;
					if ((value != null))
					{
						value.Book_importers.Add(this);
						this._ImporterID = value.ImporterID;
					}
					else
					{
						this._ImporterID = default(int);
					}
					this.SendPropertyChanged("Importer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="bookseller")]
	public partial class Bookseller : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BooksellerID;
		
		private string _Name;
		
		private string _Address;
		
		private string _Email;
		
		private string _Homepage;
		
		private string _Phone;
		
		private System.Nullable<bool> _Newletterbyemail;
		
		private System.Nullable<bool> _Newletterbymail;
		
		private string _Assortmentofbook;
		
		private string _Event;
		
		private string _Speciality;
		
		private EntitySet<Book_bookseller> _Book_booksellers;
		
		private EntitySet<Booksellerbrach> _Booksellerbraches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBooksellerIDChanging(int value);
    partial void OnBooksellerIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnHomepageChanging(string value);
    partial void OnHomepageChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnNewletterbyemailChanging(System.Nullable<bool> value);
    partial void OnNewletterbyemailChanged();
    partial void OnNewletterbymailChanging(System.Nullable<bool> value);
    partial void OnNewletterbymailChanged();
    partial void OnAssortmentofbookChanging(string value);
    partial void OnAssortmentofbookChanged();
    partial void OnEventChanging(string value);
    partial void OnEventChanged();
    partial void OnSpecialityChanging(string value);
    partial void OnSpecialityChanged();
    #endregion
		
		public Bookseller()
		{
			this._Book_booksellers = new EntitySet<Book_bookseller>(new Action<Book_bookseller>(this.attach_Book_booksellers), new Action<Book_bookseller>(this.detach_Book_booksellers));
			this._Booksellerbraches = new EntitySet<Booksellerbrach>(new Action<Booksellerbrach>(this.attach_Booksellerbraches), new Action<Booksellerbrach>(this.detach_Booksellerbraches));
			OnCreated();
		}
		
		[Column(Name="booksellerID", Storage="_BooksellerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BooksellerID
		{
			get
			{
				return this._BooksellerID;
			}
			set
			{
				if ((this._BooksellerID != value))
				{
					this.OnBooksellerIDChanging(value);
					this.SendPropertyChanging();
					this._BooksellerID = value;
					this.SendPropertyChanged("BooksellerID");
					this.OnBooksellerIDChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_Name", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="address", Storage="_Address", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Name="email", Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Name="homepage", Storage="_Homepage", DbType="NVarChar(50)")]
		public string Homepage
		{
			get
			{
				return this._Homepage;
			}
			set
			{
				if ((this._Homepage != value))
				{
					this.OnHomepageChanging(value);
					this.SendPropertyChanging();
					this._Homepage = value;
					this.SendPropertyChanged("Homepage");
					this.OnHomepageChanged();
				}
			}
		}
		
		[Column(Name="phone", Storage="_Phone", DbType="NVarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Name="newletterbyemail", Storage="_Newletterbyemail", DbType="Bit")]
		public System.Nullable<bool> Newletterbyemail
		{
			get
			{
				return this._Newletterbyemail;
			}
			set
			{
				if ((this._Newletterbyemail != value))
				{
					this.OnNewletterbyemailChanging(value);
					this.SendPropertyChanging();
					this._Newletterbyemail = value;
					this.SendPropertyChanged("Newletterbyemail");
					this.OnNewletterbyemailChanged();
				}
			}
		}
		
		[Column(Name="newletterbymail", Storage="_Newletterbymail", DbType="Bit")]
		public System.Nullable<bool> Newletterbymail
		{
			get
			{
				return this._Newletterbymail;
			}
			set
			{
				if ((this._Newletterbymail != value))
				{
					this.OnNewletterbymailChanging(value);
					this.SendPropertyChanging();
					this._Newletterbymail = value;
					this.SendPropertyChanged("Newletterbymail");
					this.OnNewletterbymailChanged();
				}
			}
		}
		
		[Column(Name="assortmentofbook", Storage="_Assortmentofbook", DbType="NVarChar(20)")]
		public string Assortmentofbook
		{
			get
			{
				return this._Assortmentofbook;
			}
			set
			{
				if ((this._Assortmentofbook != value))
				{
					this.OnAssortmentofbookChanging(value);
					this.SendPropertyChanging();
					this._Assortmentofbook = value;
					this.SendPropertyChanged("Assortmentofbook");
					this.OnAssortmentofbookChanged();
				}
			}
		}
		
		[Column(Name="event", Storage="_Event", DbType="NVarChar(100)")]
		public string Event
		{
			get
			{
				return this._Event;
			}
			set
			{
				if ((this._Event != value))
				{
					this.OnEventChanging(value);
					this.SendPropertyChanging();
					this._Event = value;
					this.SendPropertyChanged("Event");
					this.OnEventChanged();
				}
			}
		}
		
		[Column(Name="speciality", Storage="_Speciality", DbType="NVarChar(100)")]
		public string Speciality
		{
			get
			{
				return this._Speciality;
			}
			set
			{
				if ((this._Speciality != value))
				{
					this.OnSpecialityChanging(value);
					this.SendPropertyChanging();
					this._Speciality = value;
					this.SendPropertyChanged("Speciality");
					this.OnSpecialityChanged();
				}
			}
		}
		
		[Association(Name="book_bookseller-bookseller", Storage="_Book_booksellers", ThisKey="BooksellerID", OtherKey="BooksellerID", DeleteRule="NO ACTION")]
		public EntitySet<Book_bookseller> Book_booksellers
		{
			get
			{
				return this._Book_booksellers;
			}
			set
			{
				this._Book_booksellers.Assign(value);
			}
		}
		
		[Association(Name="booksellerbrach-bookseller", Storage="_Booksellerbraches", ThisKey="BooksellerID", OtherKey="BooksellerID", DeleteRule="NO ACTION")]
		public EntitySet<Booksellerbrach> Booksellerbraches
		{
			get
			{
				return this._Booksellerbraches;
			}
			set
			{
				this._Booksellerbraches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Book_booksellers(Book_bookseller entity)
		{
			this.SendPropertyChanging();
			entity.Bookseller = this;
		}
		
		private void detach_Book_booksellers(Book_bookseller entity)
		{
			this.SendPropertyChanging();
			entity.Bookseller = null;
		}
		
		private void attach_Booksellerbraches(Booksellerbrach entity)
		{
			this.SendPropertyChanging();
			entity.Bookseller = this;
		}
		
		private void detach_Booksellerbraches(Booksellerbrach entity)
		{
			this.SendPropertyChanging();
			entity.Bookseller = null;
		}
	}
	
	[Table(Name="booksellerbrach")]
	public partial class Booksellerbrach : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BooksellerbrachID;
		
		private int _BooksellerID;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Homepage;
		
		private string _Email;
		
		private EntityRef<Bookseller> _Bookseller;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBooksellerbrachIDChanging(int value);
    partial void OnBooksellerbrachIDChanged();
    partial void OnBooksellerIDChanging(int value);
    partial void OnBooksellerIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnHomepageChanging(string value);
    partial void OnHomepageChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Booksellerbrach()
		{
			this._Bookseller = default(EntityRef<Bookseller>);
			OnCreated();
		}
		
		[Column(Name="booksellerbrachID", Storage="_BooksellerbrachID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BooksellerbrachID
		{
			get
			{
				return this._BooksellerbrachID;
			}
			set
			{
				if ((this._BooksellerbrachID != value))
				{
					this.OnBooksellerbrachIDChanging(value);
					this.SendPropertyChanging();
					this._BooksellerbrachID = value;
					this.SendPropertyChanged("BooksellerbrachID");
					this.OnBooksellerbrachIDChanged();
				}
			}
		}
		
		[Column(Name="booksellerID", Storage="_BooksellerID", DbType="Int NOT NULL")]
		public int BooksellerID
		{
			get
			{
				return this._BooksellerID;
			}
			set
			{
				if ((this._BooksellerID != value))
				{
					this.OnBooksellerIDChanging(value);
					this.SendPropertyChanging();
					this._BooksellerID = value;
					this.SendPropertyChanged("BooksellerID");
					this.OnBooksellerIDChanged();
				}
			}
		}
		
		[Column(Name="address", Storage="_Address", DbType="NVarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Name="phone", Storage="_Phone", DbType="NVarChar(15)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Name="homepage", Storage="_Homepage", DbType="NVarChar(50)")]
		public string Homepage
		{
			get
			{
				return this._Homepage;
			}
			set
			{
				if ((this._Homepage != value))
				{
					this.OnHomepageChanging(value);
					this.SendPropertyChanging();
					this._Homepage = value;
					this.SendPropertyChanged("Homepage");
					this.OnHomepageChanged();
				}
			}
		}
		
		[Column(Name="email", Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Association(Name="booksellerbrach-bookseller", Storage="_Bookseller", ThisKey="BooksellerID", OtherKey="BooksellerID", IsForeignKey=true)]
		public Bookseller Bookseller
		{
			get
			{
				return this._Bookseller.Entity;
			}
			set
			{
				Bookseller previousValue = this._Bookseller.Entity;
				if (((previousValue != value) 
							|| (this._Bookseller.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bookseller.Entity = null;
						previousValue.Booksellerbraches.Remove(this);
					}
					this._Bookseller.Entity = value;
					if ((value != null))
					{
						value.Booksellerbraches.Add(this);
						this._BooksellerID = value.BooksellerID;
					}
					else
					{
						this._BooksellerID = default(int);
					}
					this.SendPropertyChanged("Bookseller");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="editor")]
	public partial class Editor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EditorID;
		
		private string _Surname;
		
		private string _Forename;
		
		private string _Homepage;
		
		private string _Email;
		
		private EntitySet<Book> _Books;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEditorIDChanging(int value);
    partial void OnEditorIDChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnForenameChanging(string value);
    partial void OnForenameChanged();
    partial void OnHomepageChanging(string value);
    partial void OnHomepageChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Editor()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			OnCreated();
		}
		
		[Column(Name="editorID", Storage="_EditorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EditorID
		{
			get
			{
				return this._EditorID;
			}
			set
			{
				if ((this._EditorID != value))
				{
					this.OnEditorIDChanging(value);
					this.SendPropertyChanging();
					this._EditorID = value;
					this.SendPropertyChanged("EditorID");
					this.OnEditorIDChanged();
				}
			}
		}
		
		[Column(Name="surname", Storage="_Surname", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[Column(Name="forename", Storage="_Forename", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string Forename
		{
			get
			{
				return this._Forename;
			}
			set
			{
				if ((this._Forename != value))
				{
					this.OnForenameChanging(value);
					this.SendPropertyChanging();
					this._Forename = value;
					this.SendPropertyChanged("Forename");
					this.OnForenameChanged();
				}
			}
		}
		
		[Column(Name="homepage", Storage="_Homepage", DbType="NVarChar(50)")]
		public string Homepage
		{
			get
			{
				return this._Homepage;
			}
			set
			{
				if ((this._Homepage != value))
				{
					this.OnHomepageChanging(value);
					this.SendPropertyChanging();
					this._Homepage = value;
					this.SendPropertyChanged("Homepage");
					this.OnHomepageChanged();
				}
			}
		}
		
		[Column(Name="email", Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Association(Name="book-editor", Storage="_Books", ThisKey="EditorID", OtherKey="EditorID", DeleteRule="NO ACTION")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Editor = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Editor = null;
		}
	}
	
	[Table(Name="importer")]
	public partial class Importer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ImporterID;
		
		private string _Name;
		
		private string _Address;
		
		private string _Homepage;
		
		private string _Email;
		
		private EntitySet<Book_importer> _Book_importers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImporterIDChanging(int value);
    partial void OnImporterIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnHomepageChanging(string value);
    partial void OnHomepageChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Importer()
		{
			this._Book_importers = new EntitySet<Book_importer>(new Action<Book_importer>(this.attach_Book_importers), new Action<Book_importer>(this.detach_Book_importers));
			OnCreated();
		}
		
		[Column(Name="importerID", Storage="_ImporterID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ImporterID
		{
			get
			{
				return this._ImporterID;
			}
			set
			{
				if ((this._ImporterID != value))
				{
					this.OnImporterIDChanging(value);
					this.SendPropertyChanging();
					this._ImporterID = value;
					this.SendPropertyChanged("ImporterID");
					this.OnImporterIDChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_Name", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="address", Storage="_Address", DbType="NVarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Name="homepage", Storage="_Homepage", DbType="NVarChar(50)")]
		public string Homepage
		{
			get
			{
				return this._Homepage;
			}
			set
			{
				if ((this._Homepage != value))
				{
					this.OnHomepageChanging(value);
					this.SendPropertyChanging();
					this._Homepage = value;
					this.SendPropertyChanged("Homepage");
					this.OnHomepageChanged();
				}
			}
		}
		
		[Column(Name="email", Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Association(Name="book_importer-importer", Storage="_Book_importers", ThisKey="ImporterID", OtherKey="ImporterID", DeleteRule="NO ACTION")]
		public EntitySet<Book_importer> Book_importers
		{
			get
			{
				return this._Book_importers;
			}
			set
			{
				this._Book_importers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Book_importers(Book_importer entity)
		{
			this.SendPropertyChanging();
			entity.Importer = this;
		}
		
		private void detach_Book_importers(Book_importer entity)
		{
			this.SendPropertyChanging();
			entity.Importer = null;
		}
	}
	
	[Table(Name="publisher")]
	public partial class Publisher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PublisherID;
		
		private string _Name;
		
		private string _Location;
		
		private string _Country;
		
		private string _Homepage;
		
		private string _Email;
		
		private EntitySet<Book> _Books;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPublisherIDChanging(int value);
    partial void OnPublisherIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnHomepageChanging(string value);
    partial void OnHomepageChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Publisher()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			OnCreated();
		}
		
		[Column(Name="publisherID", Storage="_PublisherID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PublisherID
		{
			get
			{
				return this._PublisherID;
			}
			set
			{
				if ((this._PublisherID != value))
				{
					this.OnPublisherIDChanging(value);
					this.SendPropertyChanging();
					this._PublisherID = value;
					this.SendPropertyChanged("PublisherID");
					this.OnPublisherIDChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_Name", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="location", Storage="_Location", DbType="NVarChar(50)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[Column(Name="country", Storage="_Country", DbType="NVarChar(50)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Column(Name="homepage", Storage="_Homepage", DbType="NVarChar(50)")]
		public string Homepage
		{
			get
			{
				return this._Homepage;
			}
			set
			{
				if ((this._Homepage != value))
				{
					this.OnHomepageChanging(value);
					this.SendPropertyChanging();
					this._Homepage = value;
					this.SendPropertyChanged("Homepage");
					this.OnHomepageChanged();
				}
			}
		}
		
		[Column(Name="email", Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Association(Name="book-publisher", Storage="_Books", ThisKey="PublisherID", OtherKey="PublisherID", DeleteRule="NO ACTION")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Publisher = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Publisher = null;
		}
	}
	
	[Table(Name="rack")]
	public partial class Rack : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RackID;
		
		private System.Nullable<int> _LocationID;
		
		private string _Capacity;
		
		private System.Nullable<double> _Humidity;
		
		private System.Nullable<double> _Humidityref;
		
		private System.Nullable<double> _Temp;
		
		private System.Nullable<double> _Tempref;
		
		private System.Nullable<bool> _Humiditycontrol;
		
		private System.Nullable<bool> _Tempcontrol;
		
		private string _Additionalinfo1;
		
		private string _Addtionalinfo2;
		
		private EntityRef<Storagelocation> _Storagelocation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRackIDChanging(int value);
    partial void OnRackIDChanged();
    partial void OnLocationIDChanging(System.Nullable<int> value);
    partial void OnLocationIDChanged();
    partial void OnCapacityChanging(string value);
    partial void OnCapacityChanged();
    partial void OnHumidityChanging(System.Nullable<double> value);
    partial void OnHumidityChanged();
    partial void OnHumidityrefChanging(System.Nullable<double> value);
    partial void OnHumidityrefChanged();
    partial void OnTempChanging(System.Nullable<double> value);
    partial void OnTempChanged();
    partial void OnTemprefChanging(System.Nullable<double> value);
    partial void OnTemprefChanged();
    partial void OnHumiditycontrolChanging(System.Nullable<bool> value);
    partial void OnHumiditycontrolChanged();
    partial void OnTempcontrolChanging(System.Nullable<bool> value);
    partial void OnTempcontrolChanged();
    partial void OnAdditionalinfo1Changing(string value);
    partial void OnAdditionalinfo1Changed();
    partial void OnAddtionalinfo2Changing(string value);
    partial void OnAddtionalinfo2Changed();
    #endregion
		
		public Rack()
		{
			this._Storagelocation = default(EntityRef<Storagelocation>);
			OnCreated();
		}
		
		[Column(Name="rackID", Storage="_RackID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RackID
		{
			get
			{
				return this._RackID;
			}
			set
			{
				if ((this._RackID != value))
				{
					this.OnRackIDChanging(value);
					this.SendPropertyChanging();
					this._RackID = value;
					this.SendPropertyChanged("RackID");
					this.OnRackIDChanged();
				}
			}
		}
		
		[Column(Name="locationID", Storage="_LocationID", DbType="Int")]
		public System.Nullable<int> LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[Column(Name="capacity", Storage="_Capacity", DbType="NVarChar(10)")]
		public string Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[Column(Name="humidity", Storage="_Humidity", DbType="Float")]
		public System.Nullable<double> Humidity
		{
			get
			{
				return this._Humidity;
			}
			set
			{
				if ((this._Humidity != value))
				{
					this.OnHumidityChanging(value);
					this.SendPropertyChanging();
					this._Humidity = value;
					this.SendPropertyChanged("Humidity");
					this.OnHumidityChanged();
				}
			}
		}
		
		[Column(Name="humidityref", Storage="_Humidityref", DbType="Float")]
		public System.Nullable<double> Humidityref
		{
			get
			{
				return this._Humidityref;
			}
			set
			{
				if ((this._Humidityref != value))
				{
					this.OnHumidityrefChanging(value);
					this.SendPropertyChanging();
					this._Humidityref = value;
					this.SendPropertyChanged("Humidityref");
					this.OnHumidityrefChanged();
				}
			}
		}
		
		[Column(Name="temp", Storage="_Temp", DbType="Float")]
		public System.Nullable<double> Temp
		{
			get
			{
				return this._Temp;
			}
			set
			{
				if ((this._Temp != value))
				{
					this.OnTempChanging(value);
					this.SendPropertyChanging();
					this._Temp = value;
					this.SendPropertyChanged("Temp");
					this.OnTempChanged();
				}
			}
		}
		
		[Column(Name="tempref", Storage="_Tempref", DbType="Float")]
		public System.Nullable<double> Tempref
		{
			get
			{
				return this._Tempref;
			}
			set
			{
				if ((this._Tempref != value))
				{
					this.OnTemprefChanging(value);
					this.SendPropertyChanging();
					this._Tempref = value;
					this.SendPropertyChanged("Tempref");
					this.OnTemprefChanged();
				}
			}
		}
		
		[Column(Name="humiditycontrol", Storage="_Humiditycontrol", DbType="Bit")]
		public System.Nullable<bool> Humiditycontrol
		{
			get
			{
				return this._Humiditycontrol;
			}
			set
			{
				if ((this._Humiditycontrol != value))
				{
					this.OnHumiditycontrolChanging(value);
					this.SendPropertyChanging();
					this._Humiditycontrol = value;
					this.SendPropertyChanged("Humiditycontrol");
					this.OnHumiditycontrolChanged();
				}
			}
		}
		
		[Column(Name="tempcontrol", Storage="_Tempcontrol", DbType="Bit")]
		public System.Nullable<bool> Tempcontrol
		{
			get
			{
				return this._Tempcontrol;
			}
			set
			{
				if ((this._Tempcontrol != value))
				{
					this.OnTempcontrolChanging(value);
					this.SendPropertyChanging();
					this._Tempcontrol = value;
					this.SendPropertyChanged("Tempcontrol");
					this.OnTempcontrolChanged();
				}
			}
		}
		
		[Column(Name="additionalinfo1", Storage="_Additionalinfo1", DbType="NVarChar(100)")]
		public string Additionalinfo1
		{
			get
			{
				return this._Additionalinfo1;
			}
			set
			{
				if ((this._Additionalinfo1 != value))
				{
					this.OnAdditionalinfo1Changing(value);
					this.SendPropertyChanging();
					this._Additionalinfo1 = value;
					this.SendPropertyChanged("Additionalinfo1");
					this.OnAdditionalinfo1Changed();
				}
			}
		}
		
		[Column(Name="addtionalinfo2", Storage="_Addtionalinfo2", DbType="NVarChar(100)")]
		public string Addtionalinfo2
		{
			get
			{
				return this._Addtionalinfo2;
			}
			set
			{
				if ((this._Addtionalinfo2 != value))
				{
					this.OnAddtionalinfo2Changing(value);
					this.SendPropertyChanging();
					this._Addtionalinfo2 = value;
					this.SendPropertyChanged("Addtionalinfo2");
					this.OnAddtionalinfo2Changed();
				}
			}
		}
		
		[Association(Name="rack-storagelocation", Storage="_Storagelocation", ThisKey="LocationID", OtherKey="LocationID", IsForeignKey=true)]
		public Storagelocation Storagelocation
		{
			get
			{
				return this._Storagelocation.Entity;
			}
			set
			{
				Storagelocation previousValue = this._Storagelocation.Entity;
				if (((previousValue != value) 
							|| (this._Storagelocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Storagelocation.Entity = null;
						previousValue.Racks.Remove(this);
					}
					this._Storagelocation.Entity = value;
					if ((value != null))
					{
						value.Racks.Add(this);
						this._LocationID = value.LocationID;
					}
					else
					{
						this._LocationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Storagelocation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="review")]
	public partial class Review : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReviewID;
		
		private int _AuthorID;
		
		private string _Text;
		
		private string _AdditionalInformation;
		
		private int _BookID;
		
		private EntityRef<Author> _Author;
		
		private EntityRef<Book> _Book;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReviewIDChanging(int value);
    partial void OnReviewIDChanged();
    partial void OnAuthorIDChanging(int value);
    partial void OnAuthorIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnAdditionalInformationChanging(string value);
    partial void OnAdditionalInformationChanged();
    partial void OnBookIDChanging(int value);
    partial void OnBookIDChanged();
    #endregion
		
		public Review()
		{
			this._Author = default(EntityRef<Author>);
			this._Book = default(EntityRef<Book>);
			OnCreated();
		}
		
		[Column(Name="reviewID", Storage="_ReviewID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReviewID
		{
			get
			{
				return this._ReviewID;
			}
			set
			{
				if ((this._ReviewID != value))
				{
					this.OnReviewIDChanging(value);
					this.SendPropertyChanging();
					this._ReviewID = value;
					this.SendPropertyChanged("ReviewID");
					this.OnReviewIDChanged();
				}
			}
		}
		
		[Column(Name="authorID", Storage="_AuthorID", DbType="Int NOT NULL")]
		public int AuthorID
		{
			get
			{
				return this._AuthorID;
			}
			set
			{
				if ((this._AuthorID != value))
				{
					this.OnAuthorIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorID = value;
					this.SendPropertyChanged("AuthorID");
					this.OnAuthorIDChanged();
				}
			}
		}
		
		[Column(Name="text", Storage="_Text", DbType="NVarChar(256)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Name="additional information", Storage="_AdditionalInformation", DbType="NVarChar(100)")]
		public string AdditionalInformation
		{
			get
			{
				return this._AdditionalInformation;
			}
			set
			{
				if ((this._AdditionalInformation != value))
				{
					this.OnAdditionalInformationChanging(value);
					this.SendPropertyChanging();
					this._AdditionalInformation = value;
					this.SendPropertyChanged("AdditionalInformation");
					this.OnAdditionalInformationChanged();
				}
			}
		}
		
		[Column(Name="bookID", Storage="_BookID", DbType="Int NOT NULL")]
		public int BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[Association(Name="review-author", Storage="_Author", ThisKey="AuthorID", OtherKey="AuthorID", IsForeignKey=true)]
		public Author Author
		{
			get
			{
				return this._Author.Entity;
			}
			set
			{
				Author previousValue = this._Author.Entity;
				if (((previousValue != value) 
							|| (this._Author.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Author.Entity = null;
						previousValue.Reviews.Remove(this);
					}
					this._Author.Entity = value;
					if ((value != null))
					{
						value.Reviews.Add(this);
						this._AuthorID = value.AuthorID;
					}
					else
					{
						this._AuthorID = default(int);
					}
					this.SendPropertyChanged("Author");
				}
			}
		}
		
		[Association(Name="review-book", Storage="_Book", ThisKey="BookID", OtherKey="BookID", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.Reviews.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.Reviews.Add(this);
						this._BookID = value.BookID;
					}
					else
					{
						this._BookID = default(int);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="storagelocation")]
	public partial class Storagelocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationID;
		
		private string _Locationname;
		
		private string _Address;
		
		private string _Room;
		
		private string _Shelflable;
		
		private System.Nullable<double> _Humidity;
		
		private System.Nullable<double> _Humidityref;
		
		private System.Nullable<double> _Temp;
		
		private System.Nullable<double> _Tempref;
		
		private System.Nullable<bool> _Humiditycontrol;
		
		private System.Nullable<bool> _Tempcontrol;
		
		private string _Attribute1;
		
		private EntitySet<Book> _Books;
		
		private EntitySet<Rack> _Racks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnLocationnameChanging(string value);
    partial void OnLocationnameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnRoomChanging(string value);
    partial void OnRoomChanged();
    partial void OnShelflableChanging(string value);
    partial void OnShelflableChanged();
    partial void OnHumidityChanging(System.Nullable<double> value);
    partial void OnHumidityChanged();
    partial void OnHumidityrefChanging(System.Nullable<double> value);
    partial void OnHumidityrefChanged();
    partial void OnTempChanging(System.Nullable<double> value);
    partial void OnTempChanged();
    partial void OnTemprefChanging(System.Nullable<double> value);
    partial void OnTemprefChanged();
    partial void OnHumiditycontrolChanging(System.Nullable<bool> value);
    partial void OnHumiditycontrolChanged();
    partial void OnTempcontrolChanging(System.Nullable<bool> value);
    partial void OnTempcontrolChanged();
    partial void OnAttribute1Changing(string value);
    partial void OnAttribute1Changed();
    #endregion
		
		public Storagelocation()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			this._Racks = new EntitySet<Rack>(new Action<Rack>(this.attach_Racks), new Action<Rack>(this.detach_Racks));
			OnCreated();
		}
		
		[Column(Name="locationID", Storage="_LocationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[Column(Name="locationname", Storage="_Locationname", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string Locationname
		{
			get
			{
				return this._Locationname;
			}
			set
			{
				if ((this._Locationname != value))
				{
					this.OnLocationnameChanging(value);
					this.SendPropertyChanging();
					this._Locationname = value;
					this.SendPropertyChanged("Locationname");
					this.OnLocationnameChanged();
				}
			}
		}
		
		[Column(Name="address", Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Name="room", Storage="_Room", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Room
		{
			get
			{
				return this._Room;
			}
			set
			{
				if ((this._Room != value))
				{
					this.OnRoomChanging(value);
					this.SendPropertyChanging();
					this._Room = value;
					this.SendPropertyChanged("Room");
					this.OnRoomChanged();
				}
			}
		}
		
		[Column(Name="shelflable", Storage="_Shelflable", DbType="NVarChar(100)")]
		public string Shelflable
		{
			get
			{
				return this._Shelflable;
			}
			set
			{
				if ((this._Shelflable != value))
				{
					this.OnShelflableChanging(value);
					this.SendPropertyChanging();
					this._Shelflable = value;
					this.SendPropertyChanged("Shelflable");
					this.OnShelflableChanged();
				}
			}
		}
		
		[Column(Name="humidity", Storage="_Humidity", DbType="Float")]
		public System.Nullable<double> Humidity
		{
			get
			{
				return this._Humidity;
			}
			set
			{
				if ((this._Humidity != value))
				{
					this.OnHumidityChanging(value);
					this.SendPropertyChanging();
					this._Humidity = value;
					this.SendPropertyChanged("Humidity");
					this.OnHumidityChanged();
				}
			}
		}
		
		[Column(Name="humidityref", Storage="_Humidityref", DbType="Float")]
		public System.Nullable<double> Humidityref
		{
			get
			{
				return this._Humidityref;
			}
			set
			{
				if ((this._Humidityref != value))
				{
					this.OnHumidityrefChanging(value);
					this.SendPropertyChanging();
					this._Humidityref = value;
					this.SendPropertyChanged("Humidityref");
					this.OnHumidityrefChanged();
				}
			}
		}
		
		[Column(Name="temp", Storage="_Temp", DbType="Float")]
		public System.Nullable<double> Temp
		{
			get
			{
				return this._Temp;
			}
			set
			{
				if ((this._Temp != value))
				{
					this.OnTempChanging(value);
					this.SendPropertyChanging();
					this._Temp = value;
					this.SendPropertyChanged("Temp");
					this.OnTempChanged();
				}
			}
		}
		
		[Column(Name="tempref", Storage="_Tempref", DbType="Float")]
		public System.Nullable<double> Tempref
		{
			get
			{
				return this._Tempref;
			}
			set
			{
				if ((this._Tempref != value))
				{
					this.OnTemprefChanging(value);
					this.SendPropertyChanging();
					this._Tempref = value;
					this.SendPropertyChanged("Tempref");
					this.OnTemprefChanged();
				}
			}
		}
		
		[Column(Name="humiditycontrol", Storage="_Humiditycontrol", DbType="Bit")]
		public System.Nullable<bool> Humiditycontrol
		{
			get
			{
				return this._Humiditycontrol;
			}
			set
			{
				if ((this._Humiditycontrol != value))
				{
					this.OnHumiditycontrolChanging(value);
					this.SendPropertyChanging();
					this._Humiditycontrol = value;
					this.SendPropertyChanged("Humiditycontrol");
					this.OnHumiditycontrolChanged();
				}
			}
		}
		
		[Column(Name="tempcontrol", Storage="_Tempcontrol", DbType="Bit")]
		public System.Nullable<bool> Tempcontrol
		{
			get
			{
				return this._Tempcontrol;
			}
			set
			{
				if ((this._Tempcontrol != value))
				{
					this.OnTempcontrolChanging(value);
					this.SendPropertyChanging();
					this._Tempcontrol = value;
					this.SendPropertyChanged("Tempcontrol");
					this.OnTempcontrolChanged();
				}
			}
		}
		
		[Column(Name="attribute1", Storage="_Attribute1", DbType="NVarChar(50)")]
		public string Attribute1
		{
			get
			{
				return this._Attribute1;
			}
			set
			{
				if ((this._Attribute1 != value))
				{
					this.OnAttribute1Changing(value);
					this.SendPropertyChanging();
					this._Attribute1 = value;
					this.SendPropertyChanged("Attribute1");
					this.OnAttribute1Changed();
				}
			}
		}
		
		[Association(Name="book-storagelocation", Storage="_Books", ThisKey="LocationID", OtherKey="LocationID", DeleteRule="NO ACTION")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		[Association(Name="rack-storagelocation", Storage="_Racks", ThisKey="LocationID", OtherKey="LocationID", DeleteRule="NO ACTION")]
		public EntitySet<Rack> Racks
		{
			get
			{
				return this._Racks;
			}
			set
			{
				this._Racks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Storagelocation = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Storagelocation = null;
		}
		
		private void attach_Racks(Rack entity)
		{
			this.SendPropertyChanging();
			entity.Storagelocation = this;
		}
		
		private void detach_Racks(Rack entity)
		{
			this.SendPropertyChanging();
			entity.Storagelocation = null;
		}
	}
}
#pragma warning restore 1591
